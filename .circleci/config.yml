version: 2.1

executors:

  build-executor-centos:
    docker:
      - image: opennms/build-env:11.0.5.10-3.6.3-b3976

  build-executor-debian:
    docker:
      - image: opennms/build-env:debian-jdk11-b3982

  node-executor:
    docker:
      - image: circleci/node:14

  docker-executor:
    docker:
      - image: docker:19.03.0-git

  docs-executor:
    docker:
      - image: opennms/antora:2.3.4-b6293

  netlify-cli-executor:
    docker:
      - image: opennms/netlify-cli:2.8.3-b1

orbs:
  cloudsmith: cloudsmith/cloudsmith@1.0.3
  sign-packages: opennms/sign-packages@2.1.0

# NOTE: the "_label" versions of these are for the case when your source or target
# branches have slashes in them, that way the merge branch gets created properly
defaults: &defaults
  parameters:
    from_branch:
      description: the auto-merge source branch
      type: string
      default: develop
    from_branch_label:
      description: the auto-merge source branch (escaped, no slashes)
      type: string
      default: develop
    to_branch:
      description: the auto-merge target branch
      type: string
      default: master
    to_branch_label:
      description: the auto-merge target branch (escaped, no slashes)
      type: string
      default: master

docker_container_config: &docker_container_config
  executor: docker-executor

commands:
  docker-registry-login:
    description: "Connect to Docker Registry"
    steps:
      - run:
          name: DockerHub Login
          command: |
            docker login -u ${DOCKERHUB_LOGIN} -p ${DOCKERHUB_PASS}

jobs:
  pre-build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Get version number
          command: ./get-version.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - project
  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - "66:40:61:8c:3b:99:12:df:00:ea:68:a3:61:d1:90:49"
      - restore_cache:
          name: Restore Package Cache
          keys:
            - npm-packages-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-packages-v2-{{ .Branch }}
            - npm-packages-v2-
      - run:
          name: Clean Old Cache Entries
          command: |
              if [ -d ~/.npm ]; then
                find ~/.npm -type d -maxdepth 2 -ctime +14 -exec rm -rf {} \;
              fi
      - run:
          name: Set Up Github Host Key
          command: |
              mkdir -p ~/.ssh
              chmod 700 ~/.ssh
              echo "|1|+eDL4BFAY1JfZjrxrJX0cahBtVU=|g91UxzJnqBKdJvCxPmTD59vtPV4= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
              echo "|1|SZ/U1VP2X+BY4ewvW3j9yIQDXTU=|34DiVLA+NU6P9Acg0Fk5LSbxIdg= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
              echo "|1|jopvDXD+uqD0jpXcT1YtIRhc8jQ=|KkoqYK0ZpHiiNZE6GBiYlI3cRmQ= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==" >> ~/.ssh/known_hosts
              chmod 600 ~/.ssh/known_hosts
      - run:
          name: Install Dependencies
          command: npm --no-progress ci
      - save_cache:
          name: Save Package Cache
          key: npm-packages-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
      - run:
          name: Run Build
          command: npm run build
      - run:
          name: Run Tests
          command: |
              npm run test
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build-docs:
    executor: docs-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Validate Xrefs in docs
          command: |
            NODE_PATH="$(npm -g root)" antora --generator @antora/xref-validator local-site.yml
      - run:
          name: Generate HTML output for documentation
          command: |
            NODE_PATH="$(npm -g root)" antora --stacktrace generate local-site.yml
      - store_artifacts:
          path: build/site.zip
          destination: site.zip

      - persist_to_workspace:
          root: ~/
          paths:
            - project/public
            - project/build

  create-merge-branch:
    <<: *defaults
    <<: *docker_container_config
    steps:
      - add_ssh_keys:
          fingerprints:
            - "66:40:61:8c:3b:99:12:df:00:ea:68:a3:61:d1:90:49"
      - checkout
      - run:
          name: Create git identity
          command: |
            git config user.email "cicd-system@opennms.com"
            git config user.name "CI/CD System"
      - run:
          name: Checkout target branch and merge from source
          command: |
            export GIT_MERGE_AUTOEDIT=no
            git checkout << parameters.to_branch >>
            git merge origin/<< parameters.from_branch >>
      - run:
          name: Push to github
          command: git push -f origin << parameters.to_branch >>:merge/<< parameters.from_branch_label >>-to-<< parameters.to_branch_label >>

  build-and-merge-branch:
    executor: node-executor
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "66:40:61:8c:3b:99:12:df:00:ea:68:a3:61:d1:90:49"
      - checkout
      - run:
          name: Create git identity
          command: |
            git config user.email "cicd-system@opennms.com"
            git config user.name "CI/CD System"
      - run:
          name: Checkout target and merge with merge branch
          command: |
            export GIT_MERGE_AUTOEDIT=no
            git checkout << parameters.to_branch >>
            git merge origin/merge/<< parameters.from_branch_label >>-to-<< parameters.to_branch_label >>
      - restore_cache:
          name: Restore Package Cache
          keys:
            - npm-packages-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-packages-v2-{{ .Branch }}
            - npm-packages-v2-
      - run:
          name: Install Dependencies
          command: npm --no-progress ci
      - run:
          name: Run Build
          command: npm run build
      - run:
          name: Commit Build Output
          command: |
            git add -A
            if [ "$(git status --porcelain | wc -l)" -gt 0 ]; then
              git commit -a -m 'build output for << parameters.to_branch_label >> branch'
            fi
      - run:
          name: Push to github
          command: git push origin << parameters.to_branch >>:<< parameters.to_branch >>

  make-tarball:
    executor: build-executor-centos
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create plugin tarball
          command: mkdir -p ./dist/packages && tar --exclude='package-lock.json' --exclude='.circleci' --exclude='.git' --exclude='./node_modules' --exclude='./dist/packages' -czf "./dist/packages/opennms-helm_$(cat version.tag).tar.gz" .
      - store_artifacts:
          path: ./dist/packages
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/packages

  make-docker-image:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run:
          name: Build Docker Image
          command: |
            docker build \
              --build-arg OPENNMS_HELM_PKG=opennms-helm_$(cat version.tag).tar.gz \
              --build-arg GRAFANA_VERSION=$(cat grafana.version) \
              -t helm:$(cat version.tag) .
      - run:
          name: Export Docker Image as artefact
          command: docker image save helm:$(cat version.tag) -o helm-docker-image
      - store_artifacts:
          path: ./helm-docker-image
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/helm-docker-image
  make-rpm:
    executor: build-executor-centos
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create RPM package
          command: |
            ./makerpm.js --release "$(git log --pretty=format:%cd --date=short -1 | sed -e s,-,,g).${CIRCLE_BUILD_NUM}"
      - sign-packages/install-rpm-dependencies:
          skip_if_forked_pr: true
      - sign-packages/setup-env:
          skip_if_forked_pr: true
      - sign-packages/sign-rpms:
          skip_if_forked_pr: true
          gnupg_key: opennms@opennms.org
          packages: dist/packages/*.rpm
      - store_artifacts:
          path: ./dist/packages
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/packages

  make-deb:
    executor: build-executor-debian
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create DEB package
          command: |
            ./makedeb.js --release "$(git log --pretty=format:%cd --date=short -1 | sed -e s,-,,g).${CIRCLE_BUILD_NUM}"
      - sign-packages/install-deb-dependencies:
          skip_if_forked_pr: true
      - sign-packages/setup-env:
          skip_if_forked_pr: true
      - sign-packages/sign-debs:
          skip_if_forked_pr: true
          gnupg_key: opennms@opennms.org
          packages: dist/packages/*.deb
      - store_artifacts:
          path: ./dist/packages
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/packages

  publish-docker-image-latest:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - docker-registry-login
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i ./helm-docker-image
      - run:
          name: Set DockerHub organization and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi
      - run:
          name: Tag Docker Container Images for release and publish to DockerHub
          command: |
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.tag)
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.tag)
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest

  publish-docker-image-bleeding:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - docker-registry-login
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i ./helm-docker-image
      - run:
          name: Set DockerHub organization and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi
      - run:
          name: Tag Docker Container Images for bleeding and publish to DockerHub
          command: |
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding

  publish-docs:
    executor: netlify-cli-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy docs to Netlify
          command: netlify deploy --prod -d public -s ${NETLIFY_SITE_ID}

  publish-rpm:
    executor: cloudsmith/default
    steps:
      - attach_workspace:
          at: ~/
      - cloudsmith/ensure-api-key
      - cloudsmith/install-cli
      - cloudsmith/publish:
          cloudsmith-repository: opennms/common-testing
          package-format: rpm
          package-distribution: any-distro/any-version
          package-path: dist/packages/*.rpm

  publish-deb:
    executor: cloudsmith/default
    steps:
      - attach_workspace:
          at: ~/
      - cloudsmith/ensure-api-key
      - cloudsmith/install-cli
      - cloudsmith/publish:
          cloudsmith-repository: opennms/common-testing
          package-format: deb
          package-distribution: any-distro/any-version
          package-path: dist/packages/*.deb

workflows:
  version: 2
  build-workflow:
    <<: *defaults
    jobs:
      - pre-build:
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - pre-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /^merge\/.*/
      - build-docs:
          requires:
            - pre-build
          filters:
            tags:
              only: /^v.*/
      - create-merge-branch:
          requires:
            - build
          filters:
            branches:
              only: << parameters.from_branch >>
      - build-and-merge-branch:
          requires:
            - pre-build
          filters:
            branches:
              only: merge/<< parameters.from_branch_label >>-to-<< parameters.to_branch_label >>
      - make-tarball:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - make-docker-image:
          requires:
            - make-tarball
          filters:
            tags:
              only: /^v.*/
      - make-rpm:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - make-deb:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - publish-docker-image-latest:
          requires:
            - make-docker-image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish-docker-image-bleeding:
          requires:
            - make-docker-image
          filters:
            branches:
              only: master
            tags:
              ignore: /^v.*/
      - publish-docs:
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
                - develop
            tags:
              ignore: /^v.*/
      - publish-deb:
          context: Service Principal
          requires:
            - make-deb
          filters:
            branches:
              only:
                - develop
            tags:
              ignore: /^v.*/
      - publish-rpm:
          context: Service Principal
          requires:
            - make-rpm
          filters:
            branches:
              only:
                - develop
            tags:
              ignore: /^v.*/
